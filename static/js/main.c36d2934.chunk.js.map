{"version":3,"sources":["images/image1.jpg","components/QuestionCard.styles.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c36d2934.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image1.6c9699db.jpg\";","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085A3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  \r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'\r\n    };\r\n    border: 3px solid #FFFFFF;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #FFFFFF;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25)\r\n  }\r\n`","import { shuffleArray } from './utils'\r\n\r\nexport type Question = {\r\n  category: string,\r\n  correct_answer: string,\r\n  difficulty: string,\r\n  incorrect_answers: string[],\r\n  question: string,\r\n  type: string\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard'\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n\r\n  const data = await (await fetch(endpoint)).json();\r\n\r\n  return data.results.map((question: Question) => (\r\n    {\r\n      ...question,\r\n      answers: shuffleArray([\r\n        ...question.incorrect_answers,\r\n        question.correct_answer\r\n      ])\r\n    }\r\n  ))\r\n}","import React from \"react\";\r\nimport { AnswerObject } from '../App'\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNum: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNum,\r\n  totalQuestions,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNum} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{__html: question}}></p>\r\n    <div>\r\n      {answers.map(answer => (\r\n        <ButtonWrapper\r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n        >\r\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{ __html: answer}}></span>\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5)","import styled, { createGlobalStyle } from 'styled-components'\r\n\r\nimport BGImage from './images/image1.jpg'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%\r\n  }\r\n\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: sans-serif;\r\n  }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #FFFFFF\r\n  }\r\n  .score {\r\n    color: #FFFFFF;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n\r\n  h1 {\r\n    font-family: 'Franklin Gothic Medium', 'Arial Narrow Bold', Arial, sans-serif;\r\n    background-image: linear-gradient(180deg, #FFFFFF, #87F1FF);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #FFFFFF, #FFCC91);\r\n    border: 2px solid #D38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`\r\n","import React, { useState } from 'react'\nimport QuestionCard from './components/QuestionCard'\nimport { fetchQuizQuestions } from './API'\nimport { Difficulty, QuestionState } from './API'\n\nimport { GlobalStyle, Wrapper } from './App.styles'\n\nexport type AnswerObject = {\n  question: string,\n  answer: string,\n  correct: boolean,\n  correctAnswer: string\n}\n\nconst TOTAL_QUESTIONS = 10;\nconst App = () => {\n\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n  const startTrivia = async () => {\n    setLoading(true)\n    setGameOver(false)\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS, Difficulty.EASY\n    )\n\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n\n    setLoading(false)\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!gameOver) {\n      const answer = e.currentTarget.value;\n\n      const correct = questions[number].correct_answer === answer;\n\n      if(correct) setScore(prev => prev + 1)\n\n      const answerObject: AnswerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n\n      setUserAnswers((prev) => [...prev, answerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1\n\n    if(nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true)\n    } else {\n      setNumber(nextQuestion)\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n        <Wrapper>\n          <h1> QUIZ KHELO </h1>\n\n          {(gameOver || userAnswers.length === TOTAL_QUESTIONS) && !loading ? (\n            <button className=\"start\" onClick={startTrivia}>\n              {userAnswers.length === TOTAL_QUESTIONS ? 'Start again' : 'Start'}\n            </button>\n          ) : null}\n\n          {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n          {loading && <p>Loading Questions ...</p>}\n\n          {!gameOver && !loading ? (\n            <QuestionCard\n              questionNum={number + 1}\n              totalQuestions={TOTAL_QUESTIONS}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              userAnswer={userAnswers ? userAnswers[number] : undefined}\n              callback={checkAnswer}\n            />\n          ) : null}\n\n          {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          ) : null}\n        </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}